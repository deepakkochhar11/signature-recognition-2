'use strict'
const INDEX_THRESHOLD = 50
const LENGTH = 1000

module.exports = {
	compare: compare
}

var DTW = require('dtw')
var dtw = new DTW()

function compare(newSignature, savedSignatures, callback) {
	// var savedX = []
	// var savedY = []
  // var savedForce = []
	//
	// for (var i = savedSignatures.length - 1; i >= 0; i--) {
	// 	savedX.push(savedSignatures[i].x)
	// 	savedY.push(savedSignatures[i].y)
  //     savedForce.push(savedSignatures[i].force)
	// }
	//
	// var xResult = compareValues(newSignature.x, savedX)
	// var yResult = compareValues(newSignature.y, savedY)
  // var forceResult = compareValues(newSignature.force, savedForce)
	//
	// var combinedScore = combineScores(xResult, yResult, forceResult)
	// var success = combinedScore < SCORE_THRESHOLD ? true : false
	// var result = {
	// 	success: success,
	// 	combinedScore: combinedScore,
	// 	x: xResult,
	// 	y: yResult,
	// 	acceleration: null,
	// 	gyroscope: null,
	// 	force: forceResult,
	// }
  // console.log("Result: " + result)
	var s = [11.9010009765625,11.9010009765625,11.9010009765625,11.4010009765625,11.4010009765625,11.4010009765625,11.566986083984375,11.566986083984375,11.566986083984375,11.566986083984375,12.052993774414062,12.052993774414062,12.052993774414062,12.052993774414062,10.89898681640625,10.89898681640625,8.464996337890625,8.464996337890625,5.9189910888671875,5.9189910888671875,3.368988037109375,3.368988037109375,1.584991455078125,1.584991455078125,1.584991455078125,1.584991455078125,1.584991455078125,0,0,5.5699920654296875,5.5699920654296875,5.5699920654296875,15.0889892578125,25.754989624023438,25.754989624023438,36.89698791503906,36.89698791503906,45.891998291015625,45.891998291015625,45.891998291015625,52.03399658203125,53.566986083984375,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,167.56700134277344,167.56700134277344,165.27098083496094,165.27098083496094,165.23399353027344,165.23399353027344,165.23399353027344,164.91798400878906,164.91798400878906,164.4040069580078,164.4040069580078,163.5609893798828,163.5609893798828,163.3839874267578,163.3839874267578,162.51499938964844,162.51499938964844,161.30299377441406,161.30299377441406,161.30299377441406,161.30299377441406,159.73500061035156,159.73500061035156,156.37098693847656,156.37098693847656,155.4189910888672,155.4189910888672,155.4189910888672,154.72999572753906,154.72999572753906,152.91600036621094,152.91600036621094,149.0540008544922,149.0540008544922,146.14500427246094,146.14500427246094,144.50999450683594,144.50999450683594,143.92799377441406,143.92799377441406,143.92799377441406,143.92799377441406,143.92799377441406,143.92799377441406,143.92799377441406,143.1490020751953,144.6069793701172,144.6069793701172,149.61997985839844,149.61997985839844,155.9669952392578,155.9669952392578,164.91099548339844,164.91099548339844,173.06898498535156,173.06898498535156,179.33998107910156,179.33998107910156,183.8209991455078,183.8209991455078,183.8209991455078,183.8209991455078,185.64698791503906,185.64698791503906,187.16798400878906,187.16798400878906,187.40098571777344,187.40098571777344,187.40098571777344,187.40098571777344,187.40098571777344,187.40098571777344,184.95298767089844,184.95298767089844,184.56700134277344,184.56700134277344,185.18800354003906,185.18800354003906,188.23399353027344,188.23399353027344,197.2209930419922,197.2209930419922,207.9779815673828,207.9779815673828,207.9779815673828,207.9779815673828,226.4659881591797,230.6599884033203,230.6599884033203,232.04100036621094,232.04100036621094,232.6479949951172,232.6479949951172,232.3099822998047,232.3099822998047,232.3099822998047,229.8309783935547,223.82200622558594,223.82200622558594,218.9709930419922,218.9709930419922,218.9709930419922,220.0129852294922,220.0129852294922,226.38099670410156,231.23399353027344];
	var t = [17.334014892578125,17.334014892578125,17.334014892578125,16.834014892578125,16.834014892578125,16.834014892578125,17,17,17,17,17.486007690429688,17.486007690429688,17.486007690429688,17.486007690429688,16.332000732421875,16.332000732421875,13.89801025390625,13.89801025390625,11.352005004882812,11.352005004882812,8.802001953125,8.802001953125,7.01800537109375,7.01800537109375,7.01800537109375,7.01800537109375,7.01800537109375,5.433013916015625,5.433013916015625,11.003005981445312,11.003005981445312,11.003005981445312,20.522003173828125,31.188003540039062,31.188003540039062,42.33000183105469,42.33000183105469,51.32501220703125,51.32501220703125,51.32501220703125,57.467010498046875,59,null,null,null,null,null,null,null,null,null,null,13.334014892578125,13.334014892578125,13.334014892578125,9.603012084960938,9.603012084960938,9.603012084960938,8.76300048828125,8.76300048828125,8.667007446289062,8.667007446289062,10.605010986328125,10.605010986328125,15.797012329101562,15.797012329101562,25.941009521484375,25.941009521484375,38.49501037597656,38.49501037597656,48.375,48.375,58.040008544921875,58.040008544921875,58.040008544921875,58.040008544921875,69.59700012207031,69.59700012207031,72.66000366210938,72.66000366210938,73.84901428222656,73.84901428222656,73.64100646972656,73.64100646972656,69.66700744628906,69.66700744628906,69.66700744628906,69.66700744628906,69.66700744628906,61.15000915527344,58.34300231933594,58.34300231933594,56.59600830078125,56.59600830078125,55.91200256347656,55.91200256347656,55.91200256347656,57.98600769042969,62.01200866699219,62.01200866699219,68.69200134277344,68.69200134277344,75.76701354980469,75.76701354980469,82.97000122070312,82.97000122070312,89.10501098632812,89.10501098632812,92.30000305175781,92.30000305175781,94.83401489257812,94.83401489257812,94.83401489257812,96.0150146484375,96.85101318359375,96.85101318359375,97.36201477050781,97.36201477050781,97.875,97.875,98.38700866699219,98.38700866699219,98.38700866699219,98.38700866699219,98.66700744628906,98.66700744628906,98.66700744628906,100.81201171875,100.81201171875,106.92201232910156,106.92201232910156,112.99101257324219,112.99101257324219,117.24501037597656,117.24501037597656,119.49400329589844,119.49400329589844,121.06800842285156,121.06800842285156,121.06800842285156,121.95301818847656,122.82002258300781,122.82002258300781,123.66999816894531,123.66999816894531,125.56599426269531,125.56599426269531,128.4720001220703,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,173.00001525878906,173.00001525878906,170.70399475097656,170.70399475097656,170.66700744628906,170.66700744628906,170.66700744628906,170.3509979248047,170.3509979248047,169.83702087402344,169.83702087402344,168.99400329589844,168.99400329589844,168.81700134277344,168.81700134277344,167.94801330566406,167.94801330566406,166.7360076904297,166.7360076904297,166.7360076904297,166.7360076904297,165.1680145263672,165.1680145263672,161.8040008544922,161.8040008544922,160.8520050048828,160.8520050048828,160.8520050048828,160.1630096435547,160.1630096435547,158.34901428222656,158.34901428222656,154.4870147705078,154.4870147705078,151.57801818847656,151.57801818847656,149.94300842285156,149.94300842285156,149.3610076904297,149.3610076904297,149.3610076904297,149.3610076904297,149.3610076904297,149.3610076904297,149.3610076904297,148.58201599121094,150.0399932861328,150.0399932861328,155.05299377441406,155.05299377441406,161.40000915527344,161.40000915527344,170.34400939941406,170.34400939941406,178.5019989013672,178.5019989013672,184.7729949951172,184.7729949951172,189.25401306152344,189.25401306152344,189.25401306152344,189.25401306152344,191.0800018310547,191.0800018310547,192.6009979248047,192.6009979248047,192.83399963378906,192.83399963378906,192.83399963378906,192.83399963378906,192.83399963378906,192.83399963378906,190.38600158691406,190.38600158691406,190.00001525878906,190.00001525878906,190.6210174560547,190.6210174560547,193.66700744628906,193.66700744628906,202.6540069580078,202.6540069580078,213.41099548339844,213.41099548339844,213.41099548339844,213.41099548339844,231.8990020751953,236.09300231933594,236.09300231933594,237.47401428222656,237.47401428222656,238.0810089111328,238.0810089111328,237.7429962158203,237.7429962158203,237.7429962158203,235.2639923095703,229.25502014160156,229.25502014160156,224.4040069580078,224.4040069580078,224.4040069580078,225.4459991455078,225.4459991455078,231.8140106201172,236.66700744628906,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21.667007446289062,21.667007446289062,22.254013061523438,22.254013061523438,22.254013061523438,22.254013061523438,22.254013061523438,22.334014892578125,22.334014892578125,21.885009765625,21.885009765625,20.167007446289062,20.167007446289062,16.711013793945312,16.711013793945312,16.711013793945312,16.711013793945312,8.474014282226562,8.474014282226562,4.6590118408203125,4.6590118408203125,2.2910003662109375,2.2910003662109375,2.2910003662109375,0.9550018310546875,0.9550018310546875,0.134002685546875,0.134002685546875,0,0,0,0,0,11.610000610351562,24.144012451171875,24.144012451171875,34.980010986328125,34.980010986328125,44.40901184082031,44.40901184082031,44.40901184082031,44.40901184082031,44.40901184082031,59.22801208496094,64.58900451660156,null,null,null,null,null,null,null,null,null,null,null,null,18.667007446289062,18.667007446289062,18.667007446289062,18.334014892578125,18.334014892578125,18.334014892578125,18.334014892578125,19.094009399414062,19.094009399414062,21.77301025390625,21.77301025390625,21.77301025390625,21.77301025390625,21.77301025390625,21.77301025390625,43.790008544921875,43.790008544921875,52.13301086425781,52.13301086425781,52.13301086425781,52.13301086425781,68.30400085449219,68.30400085449219,72.98300170898438,72.98300170898438,75.62200927734375,75.62200927734375,76.66700744628906,76.66700744628906,76.66700744628906,76.66700744628906,74.68701171875,74.68701171875,69.79400634765625,69.79400634765625,69.79400634765625,64.78201293945312,60.35700988769531,60.35700988769531,57.199005126953125,57.199005126953125,55.45100402832031,55.45100402832031,55.334014892578125,55.334014892578125,56.37300109863281,56.37300109863281,60.27900695800781,60.27900695800781,67.64700317382812,67.64700317382812,67.64700317382812,73.99200439453125,73.99200439453125,84.5,84.5,86.61100769042969,86.61100769042969,86.61100769042969,86.61100769042969,86.61100769042969,86.61100769042969,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,91.33401489257812,93.71400451660156,93.71400451660156,93.71400451660156,93.71400451660156,106.27500915527344,106.27500915527344,111.63200378417969,111.63200378417969,114.0260009765625,114.0260009765625,116.13301086425781,116.13301086425781,117.54899597167969,117.54899597167969,117.54899597167969,117.54899597167969,121.56199645996094,121.56199645996094,124.09800720214844,124.09800720214844,124.66700744628906,null,null,null,null,null,null,null,null,null,null,null,null,null,null,159.66700744628906,159.66700744628906,159.66700744628906,158.2360076904297,158.2360076904297,158.33399963378906,158.33399963378906,158.22999572753906,158.22999572753906,157.40699768066406,157.40699768066406,155.9239959716797,155.9239959716797,152.78001403808594,152.78001403808594,149.57801818847656,149.57801818847656,145.9759979248047,145.9759979248047,142.7740020751953,142.7740020751953,142.7740020751953,142.7740020751953,142.7740020751953,139.4759979248047,139.4759979248047,139.4759979248047,138.9610137939453,138.9610137939453,139.33399963378906,139.33399963378906,141.38099670410156,141.38099670410156,141.38099670410156,141.38099670410156,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,142.66700744628906,143.6320037841797,145.66600036621094,145.66600036621094,153.7620086669922,153.7620086669922,153.7620086669922,162.6479949951172,172.2320098876953,172.2320098876953,172.2320098876953,172.2320098876953,178.93202209472656,178.93202209472656,184.6640167236328,184.6640167236328,185.40199279785156,185.40199279785156,185.83399963378906,185.83399963378906,185.00001525878906,185.00001525878906,185.00001525878906,185.00001525878906,185.00001525878906,173.86500549316406,173.86500549316406,172.7530059814453,172.7530059814453,172.33399963378906,172.33399963378906,175.20701599121094,175.20701599121094,187.82301330566406,187.82301330566406,187.82301330566406,201.4239959716797,201.4239959716797,214.49501037597656,223.83399963378906,223.83399963378906,231.05601501464844,231.05601501464844,235.1990203857422,235.1990203857422,237.16600036621094,237.16600036621094,237.33399963378906,237.33399963378906,237.33399963378906,237.33399963378906,236.51600646972656,236.51600646972656,233.35401916503906,233.35401916503906,227.95399475097656,227.95399475097656,225.56700134277344,225.56700134277344,225.56700134277344,225.56700134277344,225.56700134277344,225.56700134277344,230.33399963378906,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29.667007446289062,29.667007446289062,28.863006591796875,28.863006591796875,27.667007446289062,27.667007446289062,28.667007446289062,28.667007446289062,28.047012329101562,28.047012329101562,28,28,27.689010620117188,27.689010620117188,27.179000854492188,27.179000854492188,27.179000854492188,27.179000854492188,24.681015014648438,24.681015014648438,16.501007080078125,16.501007080078125,13.8900146484375,13.8900146484375,12.220001220703125,12.220001220703125,11.451004028320312,11.451004028320312,10.942001342773438,10.942001342773438,11.22900390625,11.22900390625,14.220001220703125,14.220001220703125,24.384002685546875,24.384002685546875,24.384002685546875,24.384002685546875,47.05601501464844,47.05601501464844,57.855010986328125,57.855010986328125,67,67.66700744628906,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,175.66700744628906,174.65101623535156,174.65101623535156,173.97300720214844,173.97300720214844,172.6000213623047,172.6000213623047,172.6000213623047,172.6000213623047,170.5189971923828,168.47300720214844,168.47300720214844,166.44300842285156,166.44300842285156,166.44300842285156,166.44300842285156,164.0240020751953,161.7100067138672,161.7100067138672,160.07301330566406,160.07301330566406,159.7370147705078,159.7370147705078,159.7370147705078,159.33399963378906,159.61399841308594,159.61399841308594,162.5590057373047,162.5590057373047,166.16200256347656,166.16200256347656,168.2620086669922,168.2620086669922,168.65501403808594,168.65501403808594,168.66700744628906,168.66700744628906,168.66700744628906,168.66700744628906,167.66700744628906,167.66700744628906,167.63999938964844,167.63999938964844,167.63999938964844,167.63999938964844,167.00001525878906,167.00001525878906,167.2259979248047,167.2259979248047,169.35499572753906,169.35499572753906,176.66700744628906,176.66700744628906,187.55101013183594,187.55101013183594,197.8050079345703,197.8050079345703,197.8050079345703,197.8050079345703,197.8050079345703,209.63999938964844,211.8470001220703,211.8470001220703,212.3090057373047,212.3090057373047,212.33399963378906,212.33399963378906,212.33399963378906,211.02699279785156,211.02699279785156,211.02699279785156,206.9510040283203,201.89100646972656,201.89100646972656,198.70799255371094,198.70799255371094,198.70799255371094,196.9239959716797,196.5480194091797,196.5480194091797,196.5480194091797,196.5480194091797,201.95399475097656,201.95399475097656,209.15602111816406,209.15602111816406,218.5440216064453,218.5440216064453,226.43202209472656,226.43202209472656,233.79200744628906,233.79200744628906,233.79200744628906,238.81199645996094,241.4980010986328,241.4980010986328,242.13401794433594,242.13401794433594,242.13401794433594,242.13401794433594,242.13401794433594,242.33399963378906,242.33399963378906,242.33399963378906,240.1210174560547,240.1210174560547,237.9230194091797,237.9230194091797,237.33399963378906,237.33399963378906,238.4550018310547,238.4550018310547,238.4550018310547,241.9409942626953,248.49501037597656];

	var result = compute_slicing_result(s,t)
	callback(result)
}

function compareValues(newValues, savedValues) {
	var score = 0;
	for (var i = 0; i < savedValues.length; i++) {
		var result = compute_slicing_result(JSON.parse(newValues), JSON.parse(savedValues[i]));
		score = score + result
	}

	return score/savedValues.length
}

function combineScores(xScore, yScore, forceScore) {
	return (xScore * 0.1 + yScore * 0.5 + forceScore * 1000) / 3
}

function compute_slicing_result(s, t) {
	console.log('Elements in s:', s.length);
	console.log('Elements in t:', t.length);
	s = s.filter(function(n){ return n != undefined })
	t = t.filter(function(n){ return n != undefined })
	console.log('Numeric elements in s:', s.length);
	console.log('Numeric elements in t:', t.length);

	var extrema_s = prepare_slicing(s)
	var extrema_t = prepare_slicing(t)
	console.log(extrema_s);
	console.log(extrema_t);

	console.log('dtw mapped minlists:');
	var mapped_extrema_minlists = map_extrema_lists(extrema_s.minlist, extrema_t.minlist)
	extrema_s.minlist = mapped_extrema_minlists[0]
	extrema_t.minlist = mapped_extrema_minlists[1]
	var mapped_extrema_maxlists = map_extrema_lists(extrema_s.maxlist, extrema_t.maxlist)
	extrema_s.maxlist = mapped_extrema_maxlists[0]
	extrema_t.maxlist = mapped_extrema_maxlists[1]
  console.log(extrema_s.minlist);
  console.log(extrema_t.minlist);
	console.log(extrema_s.maxlist);
  console.log(extrema_t.maxlist);
	var cleaned_extrema_minlists = clean_up_lists(extrema_s.minlist, extrema_t.minlist)
	extrema_s.minlist = cleaned_extrema_minlists[0]
	extrema_t.minlist = cleaned_extrema_minlists[1]
	var cleaned_extrema_maxlists = clean_up_lists(extrema_s.maxlist, extrema_t.maxlist)
	extrema_s.maxlist = cleaned_extrema_maxlists[0]
	extrema_t.maxlist = cleaned_extrema_maxlists[1]
	var cutting_points = determine_cutting_points(extrema_s, extrema_t)
	console.log('cutting points:');
	console.log(cutting_points[0]);
	console.log(cutting_points[1]);

	return calculate_costs(s, t, cutting_points)
}

function prepare_slicing(values) {
	// ### Extrema function ###

	var extrema = function(values, eps) {
	    // make y enumerated and define x = 1, 2, 3, ...
	    var x, y;
	    y = enumerate(values);
	    x = Object.keys(y).map(Math.floor);
	    // call extremaXY version
	    var res = extremaXY(x, y, eps);
	    res.minlist = res.minlist.map(function(val) {
	        var index = Math.floor((val[1] + val[0]) / 2);
	        return Object.keys(values)[index];
	    });
	    res.maxlist = res.maxlist.map(function(val) {
	        var index = Math.floor((val[1] + val[0]) / 2);
	        return Object.keys(values)[index];
	    });

	    return {minlist: res.minlist, maxlist: res.maxlist};
	}

	var extremaXY = function(x, y, eps) {
	        // declare local vars
	        var n, s, m, M, maxlist, minlist, i, j;
	        // define x & y enumerated arrays
	        var enumerate = function(obj) {
	            var arr = [];
	            var keys = Object.keys(obj);
	            for (var k = 0; k < keys.length; k++) {
	                arr[k] = obj[keys[k]];
	            }
	            return arr;
	        }
	        y = enumerate(y);
	        x = enumerate(x);
	        // set initial values
	        n = y.length;
	        s = 0;
	        m = y[0];
	        M = y[0];
	        maxlist = [];
	        minlist = [];
	        i = 1;
	        if (typeof eps == "undefined") {
	            eps = 0.1;
	        }
	        // the algorithm
	        while (i < n) {
	            if (s == 0) {
	                if (!(M - eps <= y[i] && y[i] <= m + eps)) {
	                    if (M - eps > y[i]) {
	                        s = -1;
	                    }
	                    if (m + eps < y[i]) {
	                        s = 1;
	                    }
	                }
	                M = Math.max(M, y[i]);
	                m = Math.min(m, y[i]);
	            }
	            else {
	                if (s == 1) {
	                    if (M - eps <= y[i]) {
	                        M = Math.max(M, y[i]);
	                    }
	                    else {
	                        j = i - 1;
	                        while(y[j] >= M - eps) {
	                            j--;
	                        }
	                        maxlist.push( [x[j], x[i]] );
	                        s = -1;
	                        m = y[i];
	                    }
	                }
	                else {
	                    if(s == -1) {
	                        if(m + eps >= y[i]) {
	                            m = Math.min(m, y[i]);
	                        }
	                        else {
	                            j = i - 1;
	                            while(y[j] <= m + eps) {
	                                j--;
	                            }
	                            minlist.push( [x[j], x[i]] );
	                            s = 1;
	                            M = y[i];
	                        }
	                    }
	                }
	            }
	            i++;
	        }

	        return {minlist: minlist, maxlist: maxlist};
	    }

	    // helper to make an array or object an enumerated array
	    var enumerate = function(obj) {
	        var arr = [];
	        var keys = Object.keys(obj);
	        for (var k = 0; k < keys.length; k++) {
	            arr[k] = obj[keys[k]];
	        }
	        return arr;
	}

	values = values.filter(function(n){ return n != undefined })
	var extrema = extrema(values, "1")

	extrema.minlist = extrema.minlist.filter(function(n){ return n != undefined })
	extrema.maxlist = extrema.maxlist.filter(function(n){ return n != undefined })

	for(var i = 0; i < extrema.minlist.length; i++) extrema.minlist[i] = parseInt(extrema.minlist[i])
	for(var i = 0; i < extrema.maxlist.length; i++) extrema.maxlist[i] = parseInt(extrema.maxlist[i])

	return extrema
}

function map_extrema_lists(list_s, list_t) {
	if (list_s.length > 0 && list_t.length > 0) {
		var cost_intervals = dtw.compute(list_s, list_s);
	  var path = dtw.path();
	  var new_list_s = [list_s[0]];
	  var new_list_t = [list_t[0]];
	  if (list_s.length <= list_t.length) {
	    for (var i = 1; i < path.length; i++) {
	      if (i > 0 && (path[i][0] !== path[i-1][0])) {
	        if (i < path.length-1 && path[i][0] == path[i+1][0]) {
	          var indices = []
	          for (var j = i; j < path.length; j++) {
	            if (path[i][0] == path[j][0]) {
	              indices.push(j);
	            }
	          }
	          var distances = []
	          for (var k = 0; k < indices.length; k++) {
	            var local_distance = Math.abs(list_s[path[i][0]] - list_t[indices[k]]);
	            distances.push(local_distance);
	          }
	          var min = Math.min.apply(null, distances);
	          var index = indices[distances.indexOf(min)];

	          new_list_s.push(list_s[path[index][0]]);
	          new_list_t.push(list_t[path[index][1]]);
	          i = indices[indices.length-1]
	        } else {
	          new_list_s.push(list_s[path[i][0]]);
	          new_list_t.push(list_t[path[i][1]]);
	        }
	      }
	    }
	  } else if (list_t.length < list_s.length) {
	    for (var i = 1; i < path.length; i++) {
	      if (i > 0 && (path[i][1] !== path[i-1][1])) {
	        if (i < path.length-1 && path[i][1] == path[i+1][1]) {
	          var indices = []
	          for (var j = i; j < path.length; j++) {
	            if (path[i][1] == path[j][1]) {
	              indices.push(j);
	            }
	          }
	          var distances = []
	          for (var k = 0; k < indices.length; k++) {
	            var local_distance = Math.abs(list_s[indices[k]] - list_t[path[i][1]]);
	            distances.push(local_distance);
	          }
	          var min = Math.min.apply(null, distances);
	          var index = indices[distances.indexOf(min)];

	          new_list_s.push(list_s[path[index][0]]);
	          new_list_t.push(list_t[path[index][1]]);
	          i = indices[indices.length-1]
	        } else {
	          new_list_s.push(list_s[path[i][0]]);
	          new_list_t.push(list_t[path[i][1]]);
	        }
	      }
	    }
	  }
	  return [new_list_s, new_list_t]
	}
}

function clean_up_lists(list_s, list_t) {
	var rejected_s = []
	var rejected_t = []
	for (var i = 0; i < list_s.length; i++) {
	  if ((Math.abs(list_s[i] - list_t[i])) > 50) {
	    rejected_s.push(list_s[i])
	    rejected_t.push(list_t[i])
	  }
	}

	for (var i = 0; i < rejected_s.length; i++) {
	  list_s.splice(list_s.indexOf(rejected_s[i]), 1)
	  list_t.splice(list_t.indexOf(rejected_t[i]), 1)
	}

	return [list_s, list_t]
}

function determine_cutting_points(extrema_s, extrema_t) {
	var min_minlists = Math.min.apply(null, extrema_s.minlist.concat(extrema_t.minlist));
	var min_maxlists = Math.min.apply(null, extrema_s.maxlist.concat(extrema_t.maxlist));
	var cutting_points = undefined

	if (min_minlists < min_maxlists) {
		cutting_points = cutting_points_for_lists(extrema_s.minlist, extrema_s.maxlist, extrema_t.minlist, extrema_t.maxlist)
	} else {
		cutting_points = cutting_points_for_lists(extrema_s.maxlist, extrema_s.minlist, extrema_t.maxlist, extrema_t.minlist)
	}
	return cutting_points
}

function cutting_points_for_lists(list_s1, list_s2, list_t1, list_t2) {
	var points_s = []
	var points_t = []
	if (list_s1.length > 0 && list_t1.length > 0) {
		points_s.push(list_s1[0])
		points_t.push(list_t1[0])
	}
	if (list_s2.length > 0 && list_t2.length > 0) {
		points_s.push(list_s2[0])
		points_t.push(list_t2[0])
	}
	for (var i = 1; i < Math.max(list_s1.length, list_t1.length, list_s2.length, list_t2.length); i++) {
		if ((list_s1[i] != undefined) &&
				(list_t1[i] != undefined) &&
				(list_s1[i] > points_s[points_s.length - 1]) &&
				(list_t1[i] > points_t[points_t.length - 1])) {
					points_s.push(list_s1[i])
					points_t.push(list_t1[i])
		}
		if ((list_s2[i] != undefined) &&
				(list_t2[i] != undefined) &&
				(list_s2[i] > points_s[points_s.length - 1]) &&
				(list_t2[i] > points_t[points_t.length - 1])) {
					points_s.push(list_s2[i])
					points_t.push(list_t2[i])
		}
	}
	return [points_s, points_t]
}

function calculate_costs(s, t, cutting_points) {
	var sum = 0
	var costs = undefined
	for (var i = 0; i < cutting_points[0].length - 1; i++) {
	  var s_slice = s.slice(cutting_points[0][i], cutting_points[0][i+1])
	  var t_slice = t.slice(cutting_points[0][i], cutting_points[0][i+1])
	  costs = dtw.compute(s_slice, t_slice)
	  sum = sum + costs
	  console.log('Costs slice_' + (i + 1) + ':', costs)
	}
	console.log('Costs sum slices: ' + sum)
	return sum
}
